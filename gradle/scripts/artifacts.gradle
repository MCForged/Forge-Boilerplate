def extraTxts = [
    rootProject.file('LICENSE')
]

def changelog = rootProject.file('build/changelog.txt')

if (changelog.exists()) {
    extraTxts += changelog
}

task downloadCrowdin() {
    ext {
        output = file('build/crowdin_raw.zip')
        update = file('build/crowdin.json')
    }

    onlyIf {
        project.hasProperty('modCrowdin') && !project.gradle.startParameter.isOffline()
    }

    doLast {
        download {
            src = "https://api.crowdin.com/api/project/${mod.getString('crowdin.id')}/export?key=${project.crowdinKey}&json"
            dest output
            overwrite true
        }

        if (!update.text.contains('success')) {
            throw new RuntimeException("Crowdin export failed, see ${update} for more info")
        }

        download {
            src = "https://api.crowdin.com/api/project/${mod.getString('crowdin.id')}/download/all.zip?key=${project.crowdinKey}"
            dest output
            overwrite true
        }
    }
}

task crowdin(type: Zip) {
    dependsOn downloadCrowdin

    onlyIf {
        !downloadCrowdin.state.skipped
    }

    baseName = project.name
    version = project.version
    classifier = 'crowdin'
    destinationDir = file('build/distributions')

    from(zipTree(downloadCrowdin.output)) {
        eachFile {
            if (it.name.equals('en_us.json') && !it.path.startsWith('assets/')) {
                it.name = it.path.split('/')[0] + '.json'
                it.path = "assets/${mod.getString('id').toLowercase()}/lang/" + it.name
            }
        }

        exclude { it.isDirectory() }
        rename { it.toLowercase() }
        exclude '**/*.lang'
    }
}

jar {
    from { !crowdin.state.skipped ? zipTree(crowdin.archivePath) : null }

    dependsOn crowdin

    from extraTxts
    from sourceSets.main.output
    from sourceSets.api.output

    from (configurations.shade.collect {
        it.isDirectory() ? it : zipTree(it)
    })
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'

    from extraTxts
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'

    from { !crowdin.state.skipped ? zipTree(crowdin.archivePath) : null }

    dependsOn crowdin

    from extraTxts
    from processResources
    from processApiResources

    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    classifier = 'api'

    from extraTxts
    
    from sourceSets.api.output
}

task apiSourcesJar(type: Jar) {
    classifier = 'api-sources'

    from extraTxts
    from processApiResources

    from sourceSets.api.allJava
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
    archives apiSourcesJar
}
